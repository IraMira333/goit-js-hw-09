{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,aAAcC,SAASC,cAAc,kBACrCC,YAAaF,SAASC,cAAc,iBACpCE,cAAeH,SAASC,cAAc,mBACtCG,OAAQJ,SAASC,cAAc,SA6BjC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,GACHO,QAAQC,IAAIT,EAAUC,E,IApC1BT,EAAKM,OAAOY,iBAAiB,UAE7B,SAA4BC,GAC1BA,EAAIC,iBAEJ,IAAIC,EAAQC,OAAOtB,EAAKC,aAAasB,OAC/BC,EAAOF,OAAOtB,EAAKI,YAAYmB,OAC/BE,EAASH,OAAOtB,EAAKK,cAAckB,OACzC,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,EAAS,EAIpC,YAHA3B,EAAA4B,OAAOC,QACJ,oFAIL,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAQG,GAAK,EAChCrB,EAAcqB,EAAGP,GACdQ,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBX,EAAA4B,OAAOK,QAAQ,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAE9DwB,OAAM,SAAAH,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBX,EAAA4B,OAAOC,QAAQ,sBAAqCK,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAE9DY,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  delayInputEl: document.querySelector('[name=\"delay\"]'),\n  stepInputEl: document.querySelector('[name=\"step\"]'),\n  amountInputEl: document.querySelector('[name=\"amount\"]'),\n  formEl: document.querySelector('form'),\n};\n\nrefs.formEl.addEventListener('submit', onCreatePromiseBtn);\n\nfunction onCreatePromiseBtn(evt) {\n  evt.preventDefault();\n\n  let delay = Number(refs.delayInputEl.value);\n  const step = Number(refs.stepInputEl.value);\n  const amount = Number(refs.amountInputEl.value);\n  if (delay < 0 || step < 0 || amount < 0) {\n    Notify.failure(\n      `\"First delay\" and  \"Delay step\" must be 0 or more. \"Amount\" must be more than 0.`\n    );\n    return;\n  }\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n    console.log(position, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","delayInputEl","document","querySelector","stepInputEl","amountInputEl","formEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","console","log","addEventListener","evt","preventDefault","delay1","Number","value","step","amount","Notify","failure","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.f6abe66e.js.map"}